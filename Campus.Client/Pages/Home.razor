@page "/"
@using Campus.Client.Services.Interfaces
@using Campus.Model
@using Newtonsoft.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IStudentService _studentService
@inject IAccountService _accountService
@inject IJSRuntime js

<PageTitle>Available Courses</PageTitle>

<AuthorizeView>
    <Authorized>
        <h5>Hello, @context.User.Identity.Name!</h5>
    </Authorized>
    <NotAuthorized>
        <h5>Hello, Guest!</h5>
    </NotAuthorized>
</AuthorizeView>

<hr />

<h4>Available Courses</h4>

@if (courseModels is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container mt-4">
    <div class="row">
            <Virtualize Items="courseModels" Context="course">
                <div class="col-md-4 mb-4">
                    <img src="/course-image.jpg" class="img-responsive" width="100%" alt="">
                    <div class="card-body">
                        <h5 class="card-title">@course.Name</h5>
                        <p class="card-text">@course.Details</p>
                    </div>
                    <div class="card-footer">
                        @if (IsStudentRegisteredForCourse(course.CourseId))
                        {
                            <label class="bg-green">Enrolled</label>
                        }
                        else
                        {
                            <a href="" @onclick="()=>Register(course.CourseId)" @onclick:preventDefault class="btn btn-primary">Register</a>
                        }
                    </div>
                </div>
            </Virtualize>
    </div>
</div>
}

@code {
    private List<CourseModel>? courseModels;
    private List<StudentCourseModel>? studentCourses;
    private string error = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //await GetStudentCourses();
            await LoadAllCourses();

        }
        catch(Exception ex)
        {
            error = ex.Message;
        }
    }

    private async Task LoadAllCourses()
    {
        var response = await Http.GetAsync("Course");
        var returnValue = await response.Content.ReadAsStringAsync();
        courseModels = JsonConvert.DeserializeObject<List<CourseModel>?>(returnValue);
    }

    private async Task GetStudentCourses()
    {
        //logged in, the let's get all course the student is registered for
        if (await _accountService.IsLogedIn())
        {
            //fetch sudents registered course
            var userSessionModel = await _accountService.GetUserSessionModel();
            studentCourses = new List<StudentCourseModel>();
            studentCourses = await _studentService.FetchMyCourses(userSessionModel.UserId);
        }
    }

    private bool IsStudentRegisteredForCourse(int courseId)
    {
        try
        {
            bool exists = studentCourses.Exists(x => x.CourseId == courseId);
        }
        catch
        {}

        return studentCourses is { } ? studentCourses.Exists(x => x.CourseId == courseId) : false;
    }


    public async void Register(int courseId)
    {
        //get studentId from Sessions object
        var userSessionModel = await _accountService.GetUserSessionModel();

        if(userSessionModel is { })
        {
            //process registration

            StudentCourseModel studentCourseModel = new StudentCourseModel
            {
                StudentId = userSessionModel.UserId,
                CourseId = courseId
            };

            await _studentService.Register(studentCourseModel);

            //display a message using jsInterop to invoke the browser native alert box
            await js.InvokeVoidAsync("alert", "You have successfully resgistered for the course");
        }
    }
}
